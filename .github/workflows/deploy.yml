name: Deploy Secure Terminal

on:
  push:
    branches: [main, develop, 'feature/*']
  pull_request:
    branches: [main]

env:
  PROJECT_ID: term-site
  SERVICE_NAME: terminal-portfolio
  REGION: us-central1

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    outputs:
      backend-url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build and push Docker image
        working-directory: ./backend
        run: |
          # Show what files we're building with
          echo "Files in backend directory:"
          ls -la

          # Build the secure backend image
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest .

          # Push to Google Container Registry
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

          echo "Built and pushed secure image: ${{ github.sha }}"

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          # Determine service name based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            SERVICE_NAME="${{ env.SERVICE_NAME }}"
          else
            # Create branch-specific service name
            BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | cut -c1-20)
            SERVICE_NAME="${{ env.SERVICE_NAME }}-${BRANCH_NAME}"
          fi

          # Deploy to Cloud Run with security settings
          gcloud run deploy $SERVICE_NAME \
            --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 3001 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 10 \
            --min-instances 1 \
            --concurrency 80 \
            --timeout 600 \
            --execution-environment gen2 \
            --set-env-vars NODE_ENV=production \
            --set-env-vars MAX_SESSIONS=5 \
            --ingress all \
            --cpu-throttling \
            --session-affinity

          # Get the service URL
          URL=$(gcloud run services describe $SERVICE_NAME --region=${{ env.REGION }} --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Deployed secure backend to: $URL"

          # Test the deployment
          echo "Testing health endpoint..."
          curl -f "$URL/health" || exit 1

          echo "Testing security endpoint..."
          curl -f "$URL/security" || exit 1

          echo "Secure deployment verified!"

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ needs.deploy-backend.outputs.backend-url }}
        run: |
          echo "Building with backend URL: $NEXT_PUBLIC_API_URL"
          npm run build

      - name: Deploy to Vercel
        working-directory: ./frontend
        run: |
          npm i -g vercel@latest

          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Deploying to production..."
            vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes \
              --env NEXT_PUBLIC_API_URL=${{ needs.deploy-backend.outputs.backend-url }}
          else
            echo "Deploying to preview..."
            vercel --token=${{ secrets.VERCEL_TOKEN }} --yes \
              --env NEXT_PUBLIC_API_URL=${{ needs.deploy-backend.outputs.backend-url }}
          fi

          echo "Frontend deployed with secure backend: ${{ needs.deploy-backend.outputs.backend-url }}"

  security-test:
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - name: Security verification tests
        run: |
          URL="${{ needs.deploy-backend.outputs.backend-url }}"
          echo "Running security tests on: $URL"

          # Test 1: Verify no Docker access
          SECURITY_INFO=$(curl -s "$URL/security")
          echo "Security info: $SECURITY_INFO"

          if echo "$SECURITY_INFO" | grep -q '"dockerAccess":false'; then
            echo "‚úÖ Docker access properly disabled"
          else
            echo "‚ùå Docker access not properly disabled"
            exit 1
          fi

          # Test 2: Verify gVisor isolation
          if echo "$SECURITY_INFO" | grep -q '"isolation":"gvisor"'; then
            echo "‚úÖ gVisor isolation enabled"
          else
            echo "‚ùå gVisor isolation not detected"
            exit 1
          fi

          # Test 3: Verify rate limiting
          if echo "$SECURITY_INFO" | grep -q '"rateLimit":"enabled"'; then
            echo "‚úÖ Rate limiting enabled"
          else
            echo "‚ùå Rate limiting not enabled"
            exit 1
          fi

          # Test 4: Health check
          HEALTH=$(curl -s "$URL/health")
          if echo "$HEALTH" | grep -q '"status":"healthy"'; then
            echo "‚úÖ Service is healthy"
          else
            echo "‚ùå Service health check failed"
            exit 1
          fi

          # Test 5: Verify secure mode
          if echo "$HEALTH" | grep -q '"mode":"secure"'; then
            echo "‚úÖ Secure mode active"
          else
            echo "‚ùå Secure mode not detected"
            exit 1
          fi

          echo "üîí All security tests passed! Deployment is secure."
