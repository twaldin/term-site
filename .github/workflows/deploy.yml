name: Deploy

on:
  push:
    branches: [main, develop, 'feature/*']
  pull_request:
    branches: [main]

jobs:
  build-terminal-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build terminal image
        run: |
          # Build the terminal image
          docker build -f container/Dockerfile -t terminal-portfolio:latest .
          
          # Tag for GitHub Container Registry (use repository path to avoid org permissions)
          docker tag terminal-portfolio:latest ghcr.io/${{ github.repository }}:latest
          
          # Push to registry
          docker push ghcr.io/${{ github.repository }}:latest

  deploy-backend:
    needs: build-terminal-image
    runs-on: ubuntu-latest
    outputs:
      backend-url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Deploy to Fly.io
        id: deploy
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            APP_NAME="term-site-backend"
          else
            # Create branch-specific app name
            BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g' | cut -c1-20)
            APP_NAME="term-site-backend-${BRANCH_NAME}"
            
            # Check if app exists, create if not
            flyctl apps list | grep -q "$APP_NAME" || flyctl apps create "$APP_NAME" --org personal
          fi
          
          # Deploy
          flyctl deploy --app "$APP_NAME" --ha=false
          
          # Get URL
          URL="https://${APP_NAME}.fly.dev"
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $URL"
      
      
  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Vercel
        working-directory: ./frontend
        run: |
          npm i -g vercel
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes \
              --env NEXT_PUBLIC_API_URL=${{ needs.deploy-backend.outputs.backend-url }}
          else
            vercel --token=${{ secrets.VERCEL_TOKEN }} --yes \
              --env NEXT_PUBLIC_API_URL=${{ needs.deploy-backend.outputs.backend-url }}
          fi