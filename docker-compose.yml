version: '3.8'

services:
  # Nginx reverse proxy to route traffic
  nginx:
    image: nginx:alpine
    container_name: term-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:Z
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  # Next.js frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: term-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:3001
    expose:
      - "3000"
    restart: unless-stopped

  # Separate Docker daemon service with terminal image built-in
  docker-daemon:
    build:
      context: .
      dockerfile: container/Dockerfile.daemon
    container_name: term-docker-daemon
    privileged: true  # Only this service needs privilege
    environment:
      # Disable TLS for internal network - simpler and secure since isolated
      - DOCKER_TLS_CERTDIR=
    volumes:
      - docker-data:/var/lib/docker
    networks:
      - docker-net
    restart: unless-stopped

  # Terminal backend without privileged mode
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: term-backend
    environment:
      - NODE_ENV=production
      - FRONTEND_URL=http://frontend:3000
      - DOCKER_HOST=tcp://docker-daemon:2375
      # Disable TLS for simplicity - secure since internal network
      # - DOCKER_TLS_VERIFY=1
      # - DOCKER_CERT_PATH=/certs/client
    expose:
      - "3001"
    # volumes:
    #   - docker-certs:/certs/client:ro
    restart: unless-stopped
    depends_on:
      - docker-daemon
    networks:
      - default
      - docker-net

  # Cloudflare Tunnel (optional - can run separately)
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: term-tunnel
    command: tunnel --no-autoupdate run
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}  # Set in .env file
    restart: unless-stopped
    depends_on:
      - nginx

volumes:
  docker-data:
    driver: local

networks:
  default:
    driver: bridge
  docker-net:
    driver: bridge